name: Unit and E2E Tests
on:
  pull_request:
  schedule:
    # Run once a week on Sunday
    - cron: "0 7 * * 0"

jobs:

#### Unit tests ####
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
      - name: Install dependencies
        run: |
          go mod tidy
          go install golang.org/x/tools/cmd/cover@v0.1.0
      - name: Test CFN lambda
        working-directory: ./cfn-lambda/handler
        run: go test -v -race -covermode=atomic -coverprofile=coverage.out
      - name: Test LogGroups events lambda lambda
        working-directory: ./log-group-events-lambda/handler
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: go test -v -race -covermode=atomic -coverprofile=coverage.out
      - name: Test common functions
        working-directory: ./common
        run: go test -v -race -covermode=atomic -coverprofile=coverage.out

#### E2E Tests ####
  e2e-tests:
    needs: unit-tests  # Run e2e test only if unit tests passed
    runs-on: ubuntu-latest
    env:
      AWS_REGION: 'us-east-1'
      TEST_VERSION: test
    steps:
      # Initialize env
      - uses: actions/checkout@v4
      - name: Setup Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
      - name: Install dependencies
        run: |
          go mod tidy
          go install golang.org/x/tools/cmd/cover@v0.1.0

      # Generate the ZIP files
      - name: Build CloudFormation Lambda function
        working-directory: ./cfn-lambda
        run: |
          cp -R ../common ./common
          cp -R ../logger ./logger
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bootstrap .
          zip -x "*_test.go" -r ../cfn-lambda.zip .
      - name: Build and Zip LogGroups events Lambda function
        working-directory: ./log-group-events-lambda
        run: |
          cp -R ../common ./common
          cp -R ../logger ./logger
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bootstrap .
          zip -x "*_test.go" -r ../log-group-events-lambda.zip .

      # Setup and upload to AWS
      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Upload ZIP to S3
        run: |
          aws s3 cp ./cfn-lambda.zip s3://logzio-aws-integrations-${{ env.AWS_REGION }}/firehose-logs/${{ env.TEST_VERSION }}/cfn-lambda.zip --acl public-read
          aws s3 cp ./log-group-events-lambda.zip s3://logzio-aws-integrations-${{ env.AWS_REGION }}/firehose-logs/${{ env.TEST_VERSION }}/log-group-events-lambda.zip --acl public-read

      # Generate test data
      - name: Create API Gateway service
        id: create_api
        run: |
          # Create API
          api_id=$(aws apigateway create-rest-api --name 'auto-test-firehose-log-api' --description 'Integration test for Firehose logs' --region ${{ env.AWS_REGION }} --query 'id' --output text)
          
          # Get the root resource (/ path)
          resource_id=$(aws apigateway get-resources --rest-api-id $api_id --query 'items[0].id' --output text)
          
          # Add GET method
          aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method GET --authorization-type "NONE"
          aws apigateway put-method-response --rest-api-id $api_id --resource-id $resource_id --http-method GET --status-code 200
          
          aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method POST --authorization-type "NONE"
          aws apigateway put-method-response --rest-api-id $api_id --resource-id $resource_id --http-method POST --status-code 200
          
          aws apigateway put-integration --rest-api-id $api_id --resource-id $resource_id --http-method GET --type MOCK --request-templates '{ "application/json": "{\"statusCode\": 200}" }'
          aws apigateway put-integration-response --rest-api-id $api_id --resource-id $resource_id --http-method GET --status-code 200 --selection-pattern "" --response-templates '{"application/json": "{\"statusCode\": 200, \"message\": \"Test msg\"}"}'
          
          aws apigateway put-integration --rest-api-id $api_id --resource-id $resource_id --http-method POST --type MOCK --request-templates '{ "application/json": "{\"statusCode\": 200}" }'
          aws apigateway put-integration-response --rest-api-id $api_id --resource-id $resource_id --http-method POST --status-code 200 --selection-pattern "" --response-templates '{"application/json": "{\"statusCode\": 200, \"message\": \"Test POST msg\"}"}'
          
          # Deploy 
          aws apigateway create-deployment --rest-api-id $api_id --stage-name test --stage-description 'Test stage' --description 'First deployment'
          
          # Enable Cloudwatch logging
          aws apigateway update-stage --rest-api-id $api_id --stage-name 'test' --patch-operations 'op=replace,path=/*/*/logging/loglevel,value=INFO'
          
          # Keep the $api_id for next steps
          echo "::set-output name=api_id::$api_id"

      - name: Invoke the API to generate log group
        run: curl -X GET https://$(echo ${{ steps.create_api.outputs.api_id }}).execute-api.${{ env.AWS_REGION }}.amazonaws.com/test/

      # Deploy test stack
      - name: Update sam-template region and version vars
        working-directory: ./cloudformation
        run: |
          grep -rli '<<REGION>>' * | xargs -i@ sed -i 's/<<REGION>>/${{ env.AWS_REGION }}/g' @
          grep -rli '<<VERSION>>' * | xargs -i@ sed -i 's/<<VERSION>>/${{ env.TEST_VERSION }}/g' @

      - name: Generate random id for the test
        id: random_id
        run: echo "::set-output name=random_id::$(echo $RANDOM)"

      - name: Deploy test stack
        id: create_stack
        run: |
          aws cloudformation deploy \
          --template-file ./cloudformation/sam-template.yaml \
          --stack-name auto-test-firehose-log \
          --parameter-overrides logzioToken=${{ secrets.LOGZIO_SHIPPING_TOKEN }} logzioType=firehose_auto_test_$(echo ${{ steps.random_id.outputs.random_id }}) logzioListener=https://aws-firehose-logs-listener.logz.io services=apigateway filterPattern="GET" customLogGroups=API-Gateway-Execution-Logs_$(echo ${{ steps.create_api.outputs.api_id }})/test \
          --capabilities CAPABILITY_NAMED_IAM \
          --disable-rollback

      - name: Verify EventBridge Trigger for Log Group Events Lambda
        run: |
          lambda_arn=$(aws lambda get-function --function-name auto-test-firehose-log-log-group-events-lambda --query 'Configuration.FunctionArn' --output text)
          echo "Lambda ARN: $lambda_arn"
          
          stack_info=$(aws cloudformation describe-stacks --stack-name auto-test-firehose-log --query 'Stacks[0]')
          stack_id=$(echo $stack_info | jq -r '.StackId')
          echo "Stack ID: $stack_id"
          
          # Extract the unique part of the Stack ID that's used in the rule name
          # Pattern from template: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ]
          # First split by '/' and take 3rd part (index 2)
          stack_part=$(echo $stack_id | cut -d'/' -f3)
          # Then split by '-' and take 5th part (index 4)
          unique_id=$(echo $stack_part | cut -d'-' -f5)
          echo "Unique ID from stack: $unique_id"
          
          rule_name="logGroupCreated-$unique_id"
          echo "Looking for rule: $rule_name"
          
          rule_exists=$(aws events list-rules --query "Rules[?Name=='$rule_name'].Name" --output text)
          
          if [[ -z "$rule_exists" ]]; then
            echo "EventBridge rule '$rule_name' not found!"
            echo "Listing all logGroupCreated-* rules to debug:"
            aws events list-rules --query "Rules[?starts_with(Name, 'logGroupCreated')].Name" --output text
            exit 1
          fi
          
          echo "EventBridge rule found: $rule_name"
          
          # Get the rule ARN
          rule_arn=$(aws events describe-rule --name "$rule_name" --query 'Arn' --output text)
          echo "Rule ARN: $rule_arn"
          
          # Check if the rule has a target pointing to the lambda function
          targets=$(aws events list-targets-by-rule --rule "$rule_name")
          
          # Extract the ARN from the targets output and verify it matches the lambda ARN
          target_arn=$(echo $targets | jq -r '.Targets[0].Arn')
          
          echo "Target ARN: $target_arn"
          echo "Lambda ARN: $lambda_arn"
          
          if [[ "$target_arn" == "$lambda_arn" ]]; then
            echo "✅ EventBridge rule is correctly configured to trigger the Lambda function"
          else
            echo "❌ EventBridge rule is not configured to trigger the correct Lambda function"
            echo "Expected target: $lambda_arn"
            echo "Actual target: $target_arn"
            exit 1
          fi
          
          # Verify the event pattern includes CloudWatch Logs source
          event_pattern=$(aws events describe-rule --name "$rule_name" --query 'EventPattern' --output text)
          
          if [[ $event_pattern == *"aws.logs"* ]]; then
            echo "✅ Event pattern contains AWS logs source"
          else
            echo "❌ Event pattern does not contain AWS logs source"
            echo "Event pattern: $event_pattern"
            exit 1
          fi
          
          echo "EventBridge trigger test passed!"

      - name: Invoke the API to generate logs
        run: curl -X GET https://$(echo ${{ steps.create_api.outputs.api_id }}).execute-api.${{ env.AWS_REGION }}.amazonaws.com/test/

      - name: Wait to allow data to get to logzio
        run: sleep 240

      # Run tests
      - name: Run Go Tests
        working-directory: ./tests
        env:
          LOGZIO_API_TOKEN: ${{ secrets.LOGZIO_API_TOKEN }}
        run: go test -v ./e2e_test.go -run TestNeededDataGotToLogzio -args -logType=firehose_auto_test_${{ steps.random_id.outputs.random_id }}

      # Update stack to test using secret for customLogGroups
      - name: Create a secret with custom log group
        id: create_secret
        run: |
          secret_arn=$(aws secretsmanager create-secret --name auto-test-firehose-log-secret-$(echo ${{ steps.create_api.outputs.api_id }}) --secret-string "{\"logzioCustomLogGroups\":\"API-Gateway-Execution-Logs_$(echo ${{ steps.create_api.outputs.api_id }})/test\"}" --query 'ARN')
          echo "::set-output name=secret_arn::$secret_arn"

      - name: Update Stack to use customLogGroups from secret
        run: |
          aws cloudformation update-stack \
          --stack-name auto-test-firehose-log \
          --capabilities CAPABILITY_NAMED_IAM \
          --use-previous-template --parameters ParameterKey=customLogGroups,ParameterValue=$(echo ${{ steps.create_secret.outputs.secret_arn }}) ParameterKey=useCustomLogGroupsFromSecret,ParameterValue=true ParameterKey=logzioType,ParameterValue=firehose_auto_test_$(echo ${{ steps.random_id.outputs.random_id }})2 ParameterKey=logzioToken,UsePreviousValue=true ParameterKey=logzioListener,UsePreviousValue=true ParameterKey=services,UsePreviousValue=true

      - name: Wait for stack to finish updating
        run: aws cloudformation wait stack-update-complete --stack-name auto-test-firehose-log

      - name: Invoke the API to generate logs
        run: curl -X GET https://$(echo ${{ steps.create_api.outputs.api_id }}).execute-api.${{ env.AWS_REGION }}.amazonaws.com/test/

      - name: Wait to allow data to get to logzio
        run: sleep 240

      # Run tests
      - name: Run Go Tests
        working-directory: ./tests
        env:
          LOGZIO_API_TOKEN: ${{ secrets.LOGZIO_API_TOKEN }}
        run: go test -v ./e2e_test.go -run TestNeededDataGotToLogzio -args -logType=firehose_auto_test_${{ steps.random_id.outputs.random_id }}2

      - name: Update Stack to use filter pattern
        run: |
          aws cloudformation update-stack \
          --stack-name auto-test-firehose-log \
          --capabilities CAPABILITY_NAMED_IAM \
          --use-previous-template --parameters ParameterKey=filterPattern,ParameterValue="GET" ParameterKey=customLogGroups,UsePreviousValue=true ParameterKey=useCustomLogGroupsFromSecret,UsePreviousValue=true ParameterKey=logzioType,ParameterValue=firehose_auto_test_$(echo ${{ steps.random_id.outputs.random_id }})3 ParameterKey=logzioToken,UsePreviousValue=true ParameterKey=logzioListener,UsePreviousValue=true ParameterKey=services,UsePreviousValue=true

      - name: Wait for stack to finish updating
        run: aws cloudformation wait stack-update-complete --stack-name auto-test-firehose-log

      - name: Verify subscription filter contains the filter pattern
        run: |
          log_group_name="API-Gateway-Execution-Logs_$(echo ${{ steps.create_api.outputs.api_id }})/test"
          echo "Checking subscription filter for log group: $log_group_name"
          
          stack_info=$(aws cloudformation describe-stacks --stack-name auto-test-firehose-log --query 'Stacks[0]')
          stack_id=$(echo $stack_info | jq -r '.StackId')
          stack_part=$(echo $stack_id | cut -d'/' -f3)
          unique_id=$(echo $stack_part | cut -d'-' -f5)
          
          filter_name="auto-test-firehose-log_logzio_firehose"
          echo "Looking for filter: $filter_name"
          
          filter_details=$(aws logs describe-subscription-filters \
            --log-group-name "$log_group_name" \
            --filter-name-prefix "$filter_name")
          
          filter_count=$(echo $filter_details | jq '.subscriptionFilters | length')
          if [[ "$filter_count" -eq 0 ]]; then
            echo "❌ Subscription filter not found!"
            exit 1
          fi
          
          filter_pattern=$(echo $filter_details | jq -r '.subscriptionFilters[0].filterPattern')
          echo "Filter pattern: '$filter_pattern'"
          
          if [[ "$filter_pattern" == "GET" ]]; then
            echo "✅ Subscription filter has the correct pattern: 'GET'"
          else
            echo "❌ Subscription filter has incorrect pattern: '$filter_pattern', expected: 'GET'"
            exit 1
          fi
          
          destination_arn=$(echo $filter_details | jq -r '.subscriptionFilters[0].destinationArn')
          echo "Destination ARN: $destination_arn"
          
          firehose_arn=$(aws cloudformation describe-stacks \
            --stack-name auto-test-firehose-log \
            --query "Stacks[0].Outputs[?OutputKey=='FirehoseArn'].OutputValue" \
            --output text)
          
          if [[ -z "$firehose_arn" ]]; then
            firehose_name="auto-test-firehose-log-logzioFirehose"
            firehose_arn=$(aws firehose describe-delivery-stream \
              --delivery-stream-name "$firehose_name" \
              --query "DeliveryStreamARN" \
              --output text)
          fi
          
          echo "Firehose ARN: $firehose_arn"
          
          if [[ "$destination_arn" == "$firehose_arn" ]]; then
            echo "✅ Subscription filter points to the correct Firehose"
          else
            echo "❌ Subscription filter points to incorrect destination"
            echo "Expected: $firehose_arn"
            echo "Actual: $destination_arn"
            exit 1
          fi
          
          echo "Subscription filter verification completed successfully!"

      - name: Invoke the API with GET request (should be included by filter)
        run: curl -X GET https://$(echo ${{ steps.create_api.outputs.api_id }}).execute-api.${{ env.AWS_REGION }}.amazonaws.com/test/

      - name: Invoke the API with POST request (should be filtered out)
        run: 'curl -X POST -H "Content-Type: application/json" -d ''{"test":"data"}'' https://$(echo ${{ steps.create_api.outputs.api_id }}).execute-api.${{ env.AWS_REGION }}.amazonaws.com/test/'

      - name: Wait to allow data to get to logzio
        run: sleep 240

      - name: Run Filter Pattern Tests
        working-directory: ./tests
        env:
          LOGZIO_API_TOKEN: ${{ secrets.LOGZIO_API_TOKEN }}
        run: go test -v ./e2e_test.go -run TestFilterPattern -args -logType=firehose_auto_test_$(echo ${{ steps.random_id.outputs.random_id }})3

      # Cleanup
      - name: Delete the API Gateway
        if: ${{ always() && steps.create_api.outcome == 'success' }}
        run: aws apigateway delete-rest-api --rest-api-id $(echo ${{ steps.create_api.outputs.api_id }})

      - name: Delete Secret
        if: ${{ always() && steps.create_secret.outcome == 'success' }}
        run: aws secretsmanager delete-secret --secret-id auto-test-firehose-log-secret-$(echo ${{ steps.create_api.outputs.api_id }}) --force-delete-without-recovery

      - name: Delete Stack
        if: ${{ always() && steps.create_stack.outcome == 'success' }}
        run: |
          aws cloudformation delete-stack \
          --stack-name auto-test-firehose-log
